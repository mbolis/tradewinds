# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    tags: [ "*" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Must start from tag
      run: |
        echo "Ref is $GITHUB_REF"
        if [[ "$GITHUB_REF" != refs/tags/* ]] ; then
          echo "Not a tag. Failing!"
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install system dependencies
      run: |
        sudo apt install -y \
          libc6-dev \
          libgl1-mesa-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxxf86vm-dev \
          libasound2-dev \
          pkg-config

    - name: Build for Linux
      env:
        GOOS: linux
        GOARCH: amd64
      run: |
        go build -o tradewinds .

    - name: Build for Windows
      env:
        GOOS: windows
        GOARCH: amd64
      run: |
        go build -o tradewinds.exe .

    - name: Changelog
      id: changelog
      env:
        v: ${{ github.ref_name }}
      run: |
        v=${v%%-*}
        echo changelog=$(sed -n '/^## \['$v'[]-]/,/^## \[/{/^## \['$v'/p;/^## \[/!p}') >> $GITHUB_OUTPUT

    - name: Draft release if not existing
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ steps.changelog.outputs.changelog }}
        draft: true
        body_path: CHANGELOG.md

    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tradewinds
        asset_name: tradewinds
        asset_content_type: application/octet-stream

    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tradewinds.exe
        asset_name: tradewinds.exe
        asset_content_type: application/octet-stream

